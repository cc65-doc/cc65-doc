.Dd $Mdocdate$
.Dt SP65 1 URM
.Os 0.1.0
.Sh NAME
.Nm SP65
.Nd convert common image formats to formats used on 6502 platforms
.Sh SYNOPSIS
.Bk -words
.Op Fl Vhv
.Op Fl Fl convert-to Ar fmt Op , Ar attrlist
.Op Fl Fl list-conversions
.Op Fl Fl read Ar file Op , Ar attrlist
.Op Fl Fl write Ar file Op , Ar attrlist
.Op Fl Fl dump-palette
.Op Fl Fl pop
.Op Fl Fl slice Ar x , Ar y , Ar w , Ar h
.Ek
.Sh DESCRIPTION
A sprite and bitmap utility that is part of the cc65 development suite. It is
used to convert graphics and bitmaps into the target formats of the supported
machines.
.Sh OPTIONS
All options that are required for short options are required for long options, too.
.Pp.Pp
.Bl -tag -width "XXXXXXXXXXXXXXXXXX"
.It Fl V , Fl Fl version
Print the version number and exit
.It Fl c , Fl Fl convert-to Ar fmt , Ar attrlist
Convert into target format
.It Fl h , Fl Fl help
Print short option summary
.It Fl lc  ,  Fl Fl list-conversions
Print a list of possible conversions
.It Fl r , Fl Fl read Ar file Op , Ar attrlist
Read an input file
.It Fl v , Fl Fl verbose
Increase verbosity
.It Fl w , Fl Fl write Ar file Op , Ar attrlist
Write the output to a file
.It Fl Fl dump-palette
Dump palette as table
.It Fl Fl pop
Restore the original loaded image
.It Fl Fl slice Ar x , Ar y , Ar w , Ar h
Generate a slice from the loaded bitmap
.El
.Sh DETAILED OPTIONS
.Bl -tag -width "XXXXXXXXXXXXXXXXXX"
.It Fl c , Fl Fl convert-to Ar fmt , Ar attrlist
Convert a bitmap into one of the supported target formats.
.Em attrlist
must always contain the "format" attribute.
.Pp
See
.Em ATTRIBUTES
below.
.It Fl Fl dump-palette
Dump palette as table.
.It Fl h , Fl Fl help
Print short option summary.
.It Fl lc Fl Fl list-conversions
Print a list of possible conversions.
.It Fl Fl pop
Restore the working copy of the bitmap from the one originally loaded from the
file. This may for example be used when creating several output files from one
input file.
.It Fl r , Fl Fl read Ar file Op , Ar attrlist
Read an input file.
.Em attrlist
must always contain the "name" attribute.
.Pp
See
.Em ATTRIBUTES
below.
.It Fl v , Fl Fl verbose
Increase verbosity.  Usually only needed for debugging
purposes.  You may use this option more than one time for
even more verbose output.
.It Fl V , Fl Fl version
Print the version number of the assembler. If you send any
suggestions or bugfixes, please include the version number.
.It Fl Fl slice Ar x , Ar y , Ar w , Ar h
Generate a slice from the loaded bitmap
.It Fl w , Fl Fl write Ar file Op , Ar attrlist
Write an output file.
.Em attrlist
must at least contain the "name" attribute.
.Pp
See 
.Em ATTRIBUTES
below.
.Sh PROCESSING PIPELINE
sp65 consists of
.Bl -dash
.It
Front ends that read graphics data,
.It
processors for graphics data,
.It
converters,
.It
and output modules for several formats.
.El
.Pp
These modules can be combined to a pipeline that reads data,
does some optional bitmap processing,
converts the bitmap into a target format,
and writes this binary data to disk in one of several forms.
.Sh ATTRIBUTES
.Pp
sp65 consists of lots of different modules
that may be combined in different ways,
to convert an input bitmap to some output.
.Pp
Many of the processors and converters have options to change the way they
work. To avoid having lots of command line options that must be parsed from
the high level and passed down to the relevant parts of the program,
sp65 features something called "attribute lists".
Attribute lists are lists of attribute/value pairs.
These lists are parsed by the main program module without any knowledge
about their meaning. Lower level parts just grab the attributes they need.
.Pp
In general, attribute lists look like this:
.Pp
.Dl attr1=val1 Op , attr2=val2 Op , ...
.Pp
Instead of the comma, colons may also be used (even mixed).
.Pp
To simplify things and to make the most common options look "normal",
some mandatory attributes may be given without an attribute name.
If the attribute name is missing, the default name is determined by the position.
For example, the option 
.Em --read
does always need a file name.
The attribute name for the file name is "name".
To avoid having to type
.Pp
.Dl sp65 --read name=ball.pcx ...
.Pp
the first attribute gets the default name "name" assigned.
So if the first attribute doesn't have a name,
it is assumed that it is the file name.
This means that instead of the line above,
one can also use
.Pp
.Dl sp65 --read ball.pcx ...
.Pp
The second attribute for 
.Em --read
is the format of the input file.
So when using
.Pp
.Dl sp65 --read ball.pic:pcx ...
.Pp
a PCX file named "ball.pic" is read.
The long form would be
.Pp
.Dl sp65 --read name=ball.pic:format=pcx ...
.Pp
Changing the order of the attributes is possible only when explicitly specifying
the names of the attributes.
Using
.Pp
.Dl sp65 --read pcx:ball.pic ...
.Pp
will make sp65 complain,
because it tries to read a file named "pcx" with an (unknown) format of "ball.pic".
The following however will work:
.Pp
.Dl sp65 --read format=pcx:name=ball.pic ...
.Pp
The attributes that are valid for each processor or converter are listed below.
.Sh INPUT FORMATS
Input formats are either specified explicitly when using \fI--read\fR,
or determined by looking at the extension of the file name given.
.Bl -tag -width "XXXXXXXXXXXX"
.It PCX
While sp65 is prepared for more, this is currently the only possible input
format. There are no additional attributes for this format.
.El
.Sh CONVERSIONS
.Bl -tag -width "XXXXXXXXXXXX
.It GEOS bitmap
The current bitmap working copy is converted to a GEOS compacted bitmap.
This format is used by several GEOS functions (i.e. 'BitmapUp') and is described in
\'The Official GEOS Programmers Reference Guide', chapter 4, section 'Bit-Mapped
Graphics'.
.It GEOS icon
The current bitmap working copy is converted to GEOS icon format.
A GEOS icon has the same format as a C64 high resolution sprite (24x21,
monochrome, 63 bytes). There are no additional attributes for this conversion.
.It Lynx sprite
Lynx can handle 1, 2, 3 and 4 bits per pixel indexed sprites.
The maximum size of a sprite is roughly 508 pixels,
but in reality the Lynx screen is only 160 by
102 pixels which makes very large sprites useless.
.Pp
The number per pixels is taken from the number of colors of the input bitmap.
.Pp
There are a few attributes that you can give to the conversion software:
.Bl -tag -width "XXXXXX"
.It mode
The first is what kind of encoding to use for the sprite.
The attribute for this is called "mode" and the possible values are "literal",
"packed" or "transparent".
The default is "packed" if no mode is specified.
.Pp
The "literal" is a totally literal mode with no packing.
In this mode the number of pixels per scanline will be a
multiple of 8 both right and left from the action point.
.Pp
If the source bitmap edge ends with a color where the least 
significant bit is one then there will be an extra 8 zero bits 
on that scan line.
.Pp
So if you are using totally literal sprites and intend to
change them at runtime then please add a single pixel border
far left and far right with zeros in order to prevent
graphical glitches in the game.
.Pp
The standard encoding is called "packed". In this mode the
sprite is packed using run-length encoding and literal
coding mixed for optimisation to produce a small sprite.
.Pp
The last encoding mode "transparent" is like packed. But
here we know that the index 0 will be transparent so we can
clip off all 0 pixels from the left and right edge of the
sprite. This will produce the smallest sprite possible on
the Lynx. The sprite is not rectangular anymore.
.It ax
The sprite is painted around the Anchor point. The anchor
point x can be between 0 and the width of the sprite - 1. If
anchor point x is zero then painting the sprite in location
10,20 will set the left edge of the sprite 10 pixels from
the left of the Lynx screen. When the sprite is scaled by
hardware the anchor point stays in place and the sprite
grows or shrinks around the anchor point. The default value
is 0 (left).
.It ay
The sprite is painted around the Anchor point. The anchor
point y can be between 0 and the height of the sprite - 1.
If anchor point y is zero then painting the sprite in
location 10,20 will set the top of the sprite 20 pixels from
the top of the Lynx screen. When the sprite is scaled by
hardware the anchor point stays in place and the sprite
grows or shrinks around the anchor point. The default value
is 0 (top).
.El
.El
.Sh OUTPUT FORMATS
Using 
.Em --write
it is possible to write processed data to an output file.
An attribute "name" is mandatory, it is used as the file
name for the output.  The output format can be specified
using an attribute named "format".  If this attribute
doesn't exist, the output format is determined by looking at
the file name extension.
.Bl -tag -width "XXXXXXXXXXXX
.It Binary
For this format, the processed data is written to the output
file in raw binary format. There are no additional
attributes (besides "name" and "format") for this output
format.
.It Assembler code
For this format, the processed data is written to the output
file in ca65 assembler format. There are several attributes
for this output format:
.Bl -tag -width "XXXXXX"
.It base
The value for this attribute specifies the numeric base for
the data values.  It may be either 2, 10 or 16. The default
is 16. If the base is 2, the numbers are prefixed by '%', if
the base is 16, the numbers are prefixed by '$'. For base
10, there is no prefix.  
.It bytesperline
The value for this attribute specifies the number of bytes
output in one line of the assembler file. The default is 16.
.It ident
This is an optional attribute. When given, the output
processor will wrap the data into a 
.Em .PROC
with the given name.
In addition, three constants are added as
local symbols within the \fI.PROC\fR:
COLORS, WIDTH and HEIGHT.
.Pp
See
.Xr ca65 1
.El
.It C code
When using C output format, a small piece of C source code
is generated that defines the data containing the output in
an array of unsigned char.
.Pp
Possible attributes for this format are:
.Bl -tag -width "XXXXXX"
.It base
The value for this attribute specifies the numeric base for
the data values.  It may be either 10 or 16. The default is
16. If the base is 16, the numbers are prefixed by 0x. For
base 10, there is no prefix.
.It bytesperline
The value for this attribute specifies the number of bytes
output in one line of the C source code. The default is 16.
.It ident
This is an optional attribute. When given, the output
processor will wrap the data into an array of unsigned char
with the given name. In addition, three #defines are added
for <ident>_COLORS, <ident>_WIDTH and <ident>_HEIGHT.
.El
.El
.Sh AUTHORS
Program Author: Ullrich von Bassewitz <\fIwebmaster@von-bassewitz.de\fR>
.br
Manpage Author: Jake Grossman         <\fIjake.r.grossman@gmail.com\fR>
.Sh COPYRIGHT
sp65 (and all cc65 binutils) are (C) Copyright 1998-2012
Ullrich von Bassewitz and others. For usage of the binaries
and/or sources the following conditions do apply:
.Pp
This software is provided 'as-is', without any expressed or
implied warranty. In no event will the authors be held
liable for any damages arising from the use of this
software.
.Pp
Permission is granted to anyone to use this software for any
purpose, including commercial applications, and to alter it
and redistribute it freely, subject to the following
restrictions:
.Bl -enum
.It
The origin of this software must not be misrepresented; you
must not claim that you wrote the original software. If you
use this software in a product, an acknowledgment in the
product documentation would be appreciated but is not
required.
.It
Altered source versions must be plainly marked as such, and
must not be misrepresented as being the original software.
.It
This notice may not be removed or altered from any source
distribution.
.El
.Sh SEE ALSO
.Xr cc65 1 ,
.Xr ca65
