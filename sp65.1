.TH sp65 1 "August 2021" "0.1.0" "User Manuals"
.SH NAME
sp65 \- convert common image formats to formats used on 6502 platforms

.SH SYNOPSIS
sp65 [\fIOPTIONS\fR] file [\fIOPTIONS\fR] [\fIFILE\fR]

.SH DESCRIPTION
A sprite and bitmap utility that is part of the cc65 development suite. It is
used to convert graphics and bitmaps into the target formats of the supported
machines.

.SH OPTIONS

.TP
.BR \-V ", " \-\-version
Print the version number and exit

.TP
.BR \-c ", " \-\-convert\-to " " \fIfmt\fR[,\fIattrlist\fR]
Convert into target format

.TP
.BR \-h ", " \-\-help
Print short option summary

.TP
.BR \-lc ", " \-\-list\-conversions
Print a list of possible conversions

.TP
.BR \-r ", " \-\-read " " \fIfile\fR[,\fIattrlist\fR]
Read an input file

.TP
.BR \-v ", " \-\-verbose
Increase verbosity

.TP
.BR \-w ", " \-\-write " " \fIfile\fR[,\fIattrlist\fR]
Write the output to a file

.TP
.BR \-\-dump\-palette
Dump palette as table

.TP
.BR \-\-pop
Restore the original loaded image

.TP
.BR \-\-slice " " \fIx\fR,\fIy\fR,\fIw\fR,\fIh\fR
Generate a slice from the loaded bitmap

.SH DETAILED OPTIONS

.TP
.BR \-c ", " \-\-convert\-to " " \fIfmt\fR[,\fIattrlist\fR]
Convert a bitmap into one of the supported target formats. The option argument
must at least contain "format" attribute.

See: \fIATTRIBUTES\fR

.TP
.BR \-\-dump\-palette
Dump palette as table.

.TP
.BR \-h ", " \-\-help
Print short option summary.

.TP
.BR \-lc ", " \-\-list\-conversions
Print a list of possible conversions.

.TP
.BR \-\-pop
Restore the working copy of the bitmap from the one originally loaded from the
file. This may for example be used when creating several output files from one
input file.

.TP
.BR \-r ", " \-\-read " " \fIfile\fR[,\fIattrlist\fR]
Read an input file. The option argument must at least contain must at least
contain the "name" attribute.

See: \fIATTRIBUTES\fR

.TP
.BR \-v ", " \-\-verbose
Increase verbosity. Usually only needed for debugging purposes. You may use this
option more than one time for even more verbose output.

.TP
.BR \-V ", " \-\-version
Print the version number of the assembler. If you send any suggestions or
bugfixes, please include the version number.

.TP
.BR \-\-slice " " \fIx\fR,\fIy\fR,\fIw\fR,\fIh\fR
Generate a slice from the loaded bitmap

.TP
.BR \-w ", " \-\-write " " \fIfile\fR[,\fIattrlist\fR]
Write an output file. The option argument must at least contain the "name"
attribute.

See: \fIATTRIBUTES\fR


.SH PROCESSING PIPELINE
sp65 consists of

.RS
.IP - 2
Front ends that read graphics data,

.IP - 2
processors for graphics data,

.IP - 2
converters,

.IP - 2
and output modules for several formats.
.RE

These modules can be combined to a pipeline that reads data, does some optional
bitmap processing, converts the bitmap into a target format, and writes this
binary data to disk in one of several forms.

.SH ATTRIBUTES

As described in PROCESSING PIPELINE, sp65 consists of lots of different modules
that may be combined in different ways, to convert an input bitmap to some
output.

Many of the processors and converters have options to change the way, they're
working. To avoid having lots of command line options that must be parsed on
high level and passed down to the relevant parts of the program, sp65 features
something called "attribute lists". Attribute lists are lists of attribute/value
pairs. These lists are parsed by the main program module without any knowledge
about their meaning. Lower level parts just grab the attributes they need.

In general, attribute lists look like this:

.RS
\fIattr1\fR=\fIval1\fR[,\fIattr2\fR=\fIval2\fR[,\fI...\fR]]
.RE

Instead of the comma, colons may also be used (even mixed).

To simplify things and to make the most common options look "normal", some
mandatory attributes may be given without an attribute name. If the attribute
name is missing, the default name is determined by the position. For example,
the option --read does always need a file name. The attribute name for the file
name is "name". To avoid having to type

.RS
sp65 --read name=ball.pcx ...
.RE

the first attribute gets the default name "name" assigned. So if the first
attribute doesn't have a name, it is assumed that it is the file name. This
means that instead of the line above, one can also use

.RS
sp65 --read ball.pcx ...
.RE

The second attribute for --read is the format of the input file. So when using

.RS
sp65 --read ball.pic:pcx ...
.RE

a PCX file named "ball.pic" is read. The long form would be

.RS
sp65 --read name=ball.pic:format=pcx ...
.RE

Changing the order of the attributes is possible only when explicitly specifying
the names of the attributes. Using

.RS
sp65 --read pcx:ball.pic ...
.RE

will make sp65 complain, because it tries to read a file named "pcx" with an
(unknown) format of "ball.pic". The following however will work:

.RS
sp65 --read format=pcx:name=ball.pic ...
.RE

The attributes that are valid for each processor or converter are listed below.

.SH INPUT FORMATS
Input formats are either specified explicitly when using \fI\-\-read\fR, or are
determined by looking at the extension of the file name given.

.TP
.B PCX
While sp65 is prepared for more, this is currently the only possible input
format. There are no additional attributes for this format.

.SH CONVERSIONS

.TP
.B GEOS bitmap
The current bitmap working copy is converted to a GEOS compacted bitmap. This
format is used by several GEOS functions (i.e. 'BitmapUp') and is described in
\'The Official GEOS Programmers Reference Guide', chapter 4, section 'Bit-Mapped
Graphics'.

.TP
.B GEOS icon
The current bitmap working copy is converted to GEOS icon format. A GEOS icon
has the same format as a C64 high resolution sprite (24x21, monochrome, 63
bytes). There are no additional attributes for this conversion.

.TP
.B Lynx sprite
Lynx can handle 1, 2, 3 and 4 bits per pixel indexed sprites. The maximum size
of a sprite is roughly 508 pixels but in reality the Lynx screen is only 160 by
102 pixels which makes very large sprites useless.

The number per pixels is taken from the number of colors of the input bitmap.

There are a few attributes that you can give to the conversion software:

.RS
.TP
.B mode

The first is what kind of encoding to use for the sprite. The attribute for this
is called "mode" and the possible values are "literal", "packed" or
"transparent". The default is "packed" if no mode is specified.

The "literal" is a totally literal mode with no packing. In this mode the number
of pixels per scanline will be a multiple of 8 both right and left from the
action point.

If the source bitmap edge ends with a color where the least significant bit is
one then there will be an extra 8 zero bits on that scan line.

So if you are using totally literal sprites and intend to change them at runtime
then please add a single pixel border far left and far right with zeros in order
to prevent graphical glitches in the game.

The standard encoding is called "packed". In this mode the sprite is packed
using run-length encoding and literal coding mixed for optimisation to produce a
small sprite.

The last encoding mode "transparent" is like packed. But here we know that the
index 0 will be transparent so we can clip off all 0 pixels from the left and
right edge of the sprite. This will produce the smallest sprite possible on the
Lynx. The sprite is not rectangular anymore.

.TP
.B ax

The sprite is painted around the Anchor point. The anchor point x can be between
0 and the width of the sprite - 1. If anchor point x is zero then painting the
sprite in location 10,20 will set the left edge of the sprite 10 pixels from the
left of the Lynx screen. When the sprite is scaled by hardware the anchor point
stays in place and the sprite grows or shrinks around the anchor point. The
default value is 0 (left).

.TP
.B ay

The sprite is painted around the Anchor point. The anchor point y can be between
0 and the height of the sprite - 1. If anchor point y is zero then painting the
sprite in location 10,20 will set the top of the sprite 20 pixels from the top
of the Lynx screen. When the sprite is scaled by hardware the anchor point stays
in place and the sprite grows or shrinks around the anchor point. The default
value is 0 (top).
.RE

.SH OUTPUT FORMATS
Using \fI\-\-write\fR it is possible to write processed data to an output file.
An attribute "name" is mandatory, it is used as the file name for the output.
The output format can be specified using an attribute named "format". If this
attribute doesn't exist, the output format is determined by looking at the file
name extension.

.TP
.B Binary

For this format, the processed data is written to the output file in raw binary
format. There are no additional attributes (besides "name" and "format") for
this output format.

.TP
.B Assembler code

For this format, the processed data is written to the output file in ca65
assembler format. There are several attributes for this output format:

.RS

.TP
.B base

The value for this attribute specifies the numeric base for the data values.  It
may be either 2, 10 or 16. The default is 16. If the base is 2, the numbers are
prefixed by '%', if the base is 16, the numbers are prefixed by '$'. For base
10, there is no prefix.  

.TP
.B bytesperline

The value for this attribute specifies the number of bytes output in one
line of the assembler file. The default is 16.

.TP
.B ident

This is an optional attribute. When given, the output processor will wrap the
data into a \fI.PROC\fR with the given name. In addition, three constants are added as
local symbols within the \fI.PROC\fR: COLORS, WIDTH and HEIGHT.

See:
.B ca65(1)

.RE

.TP
.B C code

When using C output format, a small piece of C source code is generated that
defines the data containing the output in an array of unsigned char.

Possible attributes for this format are:

.RS

.TP
.B base

The value for this attribute specifies the numeric base for the data values.
It may be either 10 or 16. The default is 16. If the base is 16, the numbers are
prefixed by 0x. For base 10, there is no prefix.

.TP
.B bytesperline

The value for this attribute specifies the number of bytes output in one
line of the C source code. The default is 16.

.TP
.B ident

This is an optional attribute. When given, the output processor will wrap
the data into an array of unsigned char with the given name. In addition, three
#defines are added for <ident>_COLORS, <ident>_WIDTH and <ident>_HEIGHT.
.RE

.SH AUTHOR
Program Author: Ullrich von Bassewitz <webmaster@von-bassewitz.de>
.br
Manpage Author: Jake Grossman         <jake.r.grossman@gmail.com>

.SH COPYRIGHT
sp65 (and all cc65 binutils) are (C) Copyright 1998-2012 Ullrich von Bassewitz
and others. For usage of the binaries and/or sources the following conditions do
apply:

This software is provided 'as-is', without any expressed or implied warranty. In
no event will the authors be held liable for any damages arising from the use of
this software.

Permission is granted to anyone to use this software for any purpose, including
commercial applications, and to alter it and redistribute it freely, subject to
the following restrictions:

.IP 1.
The origin of this software must not be misrepresented; you must not claim that
you wrote the original software. If you use this software in a product, an
acknowledgment in the product documentation would be appreciated but is not
required.

.IP 2.
Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

.IP 3.
This notice may not be removed or altered from any source distribution.

.SH SEE ALSO
.BR cc65(1)
